# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from enum import Enum
from mergedapi.api_helper import APIHelper
from apimatic_core.http.configurations.http_client_configuration import HttpClientConfiguration
from apimatic_requests_client_adapter.requests_client import RequestsClient
from mergedapi.models.oauth_token import OauthToken


class Environment(Enum):
    """An enum for SDK environments"""
    PRODUCTION = 0
    STAGING = 1


class Server(Enum):
    """An enum for API servers"""
    DEFAULT = 0
    OAUTH_SERVER = 1
    DEFAULT1 = 2
    DEFAULT2 = 3
    DEFAULT3 = 4
    OAUTH_SERVER1 = 5
    DEFAULT4 = 6
    DEFAULT5 = 7
    DEFAULT6 = 8
    DEFAULT7 = 9
    DEFAULT8 = 10
    DEFAULT9 = 11
    DEFAULT10 = 12
    DEFAULT11 = 13
    AUTH_SERVER = 14


class Configuration(HttpClientConfiguration):
    """A class used for configuring the SDK by a user.
    """

    @property
    def environment(self):
        return self._environment

    @property
    def oauth_client_id(self):
        return self._oauth_client_id

    @property
    def oauth_client_secret(self):
        return self._oauth_client_secret

    @property
    def oauth_scopes(self):
        return self._oauth_scopes

    @property
    def vz_m2m_token(self):
        return self._vz_m2m_token

    @property
    def oauth_token(self):
        if type(self._oauth_token) is OauthToken:
            return OauthToken.from_dictionary(APIHelper.to_dictionary(self._oauth_token))
        else:
            return self._oauth_token

    def __init__(
        self, http_client_instance=None,
        override_http_client_configuration=False, http_call_back=None,
        timeout=60, max_retries=0, backoff_factor=2,
        retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
        retry_methods=['GET', 'PUT'], environment=Environment.PRODUCTION,
        oauth_client_id='TODO: Replace', oauth_client_secret='TODO: Replace',
        oauth_token=None, oauth_scopes=None, vz_m2m_token='TODO: Replace'
    ):
        super().__init__(http_client_instance, override_http_client_configuration, http_call_back, timeout, max_retries,
                         backoff_factor, retry_statuses, retry_methods)
        # Current API environment
        self._environment = environment

        # OAuth 2 Client ID
        self._oauth_client_id = oauth_client_id

        # OAuth 2 Client Secret
        self._oauth_client_secret = oauth_client_secret

        # Object for storing information about the OAuth token
        if type(oauth_token) is OauthToken:
            self._oauth_token = OauthToken.from_dictionary(APIHelper.to_dictionary(oauth_token))
        else:
            self._oauth_token = oauth_token

        # TODO: Replace
        self._oauth_scopes = oauth_scopes

        # M2M Session Token
        self._vz_m2m_token = vz_m2m_token

        # The Http Client to use for making requests.
        super().set_http_client(self.create_http_client())

    def clone_with(self, http_client_instance=None,
                   override_http_client_configuration=None, http_call_back=None,
                   timeout=None, max_retries=None, backoff_factor=None,
                   retry_statuses=None, retry_methods=None, environment=None,
                   oauth_client_id=None, oauth_client_secret=None,
                   oauth_token=None, oauth_scopes=None, vz_m2m_token=None):
        http_client_instance = http_client_instance or super().http_client_instance
        override_http_client_configuration = override_http_client_configuration or super().override_http_client_configuration
        http_call_back = http_call_back or super().http_callback
        timeout = timeout or super().timeout
        max_retries = max_retries or super().max_retries
        backoff_factor = backoff_factor or super().backoff_factor
        retry_statuses = retry_statuses or super().retry_statuses
        retry_methods = retry_methods or super().retry_methods
        environment = environment or self.environment
        oauth_client_id = oauth_client_id or self.oauth_client_id
        oauth_client_secret = oauth_client_secret or self.oauth_client_secret
        oauth_token = oauth_token or self.oauth_token
        oauth_scopes = oauth_scopes or self.oauth_scopes
        vz_m2m_token = vz_m2m_token or self.vz_m2m_token
        return Configuration(
            http_client_instance=http_client_instance,
            override_http_client_configuration=override_http_client_configuration,
            http_call_back=http_call_back, timeout=timeout,
            max_retries=max_retries, backoff_factor=backoff_factor,
            retry_statuses=retry_statuses, retry_methods=retry_methods,
            environment=environment, oauth_client_id=oauth_client_id,
            oauth_client_secret=oauth_client_secret, oauth_token=oauth_token,
            oauth_scopes=oauth_scopes, vz_m2m_token=vz_m2m_token
        )

    def create_http_client(self):
        return RequestsClient(
            timeout=super().timeout, max_retries=super().max_retries,
            backoff_factor=super().backoff_factor, retry_statuses=super().retry_statuses,
            retry_methods=super().retry_methods,
            http_client_instance=super().http_client_instance,
            override_http_client_configuration=super().override_http_client_configuration,
            response_factory=super().http_response_factory
        )

    # All the environments the SDK can run in
    environments = {
        Environment.PRODUCTION: {
            Server.DEFAULT: 'https://5gedge.verizon.com/api/mec/eds',
            Server.OAUTH_SERVER: 'https://5gedge.verizon.com/api/ts/v1',
            Server.DEFAULT1: 'https://5gedge.verizon.com/api/mec',
            Server.DEFAULT2: 'https://5gedge.verizon.com/api/mec/services',
            Server.DEFAULT3: 'https://thingspace.verizon.com/api/cc/v1',
            Server.OAUTH_SERVER1: 'https://thingspace.verizon.com/api/ts/v1',
            Server.DEFAULT4: 'https://thingspace.verizon.com/api/diagnostics/v1',
            Server.DEFAULT5: 'https://thingspace.verizon.com/api/loc/v1',
            Server.DEFAULT6: 'https://thingspace.verizon.com/api/fota/v1',
            Server.DEFAULT7: 'https://thingspace.verizon.com/api/fota/v2',
            Server.DEFAULT8: 'https://thingspace.verizon.com/api/fota/v3',
            Server.DEFAULT9: 'https://thingspace.verizon.com/api/m2m/v1',
            Server.DEFAULT10: 'https://thingspace.verizon.com/api/hyper-precise/v1',
            Server.DEFAULT11: 'https://thingspace.verizon.com/api/m2m',
            Server.AUTH_SERVER: 'https://localhost:9443/oauth2'
        },
        Environment.STAGING: {
            Server.DEFAULT: 'https://staging.5gedge.verizon.com/api/mec/eds',
            Server.OAUTH_SERVER: 'https://staging.5gedge.verizon.com/api/ts/v1',
            Server.DEFAULT1: 'https://staging.5gedge.verizon.com/api/mec',
            Server.DEFAULT2: 'https://staging.5gedge.verizon.com/api/mec/services',
            Server.DEFAULT3: 'https://staging.thingspace.verizon.com/api/cc/v1',
            Server.OAUTH_SERVER1: 'https://staging.thingspace.verizon.com/api/ts/v1',
            Server.DEFAULT4: 'https://staging.thingspace.verizon.com/api/diagnostics/v1',
            Server.DEFAULT5: 'https://staging.thingspace.verizon.com/api/loc/v1',
            Server.DEFAULT6: 'https://staging.thingspace.verizon.com/api/fota/v1',
            Server.DEFAULT7: 'https://staging.thingspace.verizon.com/api/fota/v2',
            Server.DEFAULT8: 'https://staging.thingspace.verizon.com/api/fota/v3',
            Server.DEFAULT9: 'https://staging.thingspace.verizon.com/api/m2m/v1',
            Server.DEFAULT10: 'https://staging.thingspace.verizon.com/api/hyper-precise/v1',
            Server.DEFAULT11: 'https://staging.thingspace.verizon.com/api/m2m',
            Server.AUTH_SERVER: 'https://localhost:9443/oauth2'
        }
    }

    def get_base_uri(self, server=Server.DEFAULT):
        """Generates the appropriate base URI for the environment and the
        server.

        Args:
            server (Configuration.Server): The server enum for which the base
            URI is required.

        Returns:
            String: The base URI.

        """
        return self.environments[self.environment][server]
