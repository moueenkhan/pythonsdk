# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.parameters import Parameters


class SetingsResponse(object):

    """Implementation of the 'setingsResponse' model.

    Settings for Anomaly Detection.

    Attributes:
        account_name (string): Indicates if the account name used has Anomaly
            Detection.<br />Success - The account has Anomaly Detection<br
            />Failure - The account does not have Anomaly Detection
        sensitivity_parameter (list of Parameters): The initial values and
            monitoring state for abnormal and very abnormal.
        status (string): Indicates if Anomaly Detection is active on the
            account<br />Active - Anomaly Detection is active<br />Disabled-
            Anomaly Detection is not active

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "sensitivity_parameter": 'sensitivityParameter',
        "status": 'status'
    }

    _optionals = [
        'account_name',
        'sensitivity_parameter',
        'status',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 sensitivity_parameter=APIHelper.SKIP,
                 status=APIHelper.SKIP):
        """Constructor for the SetingsResponse class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if sensitivity_parameter is not APIHelper.SKIP:
            self.sensitivity_parameter = sensitivity_parameter 
        if status is not APIHelper.SKIP:
            self.status = status 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        sensitivity_parameter = None
        if dictionary.get('sensitivityParameter') is not None:
            sensitivity_parameter = [Parameters.from_dictionary(x) for x in dictionary.get('sensitivityParameter')]
        else:
            sensitivity_parameter = APIHelper.SKIP
        status = dictionary.get("status") if dictionary.get("status") else APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   sensitivity_parameter,
                   status)
