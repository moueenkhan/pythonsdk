# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.subscription_2 import Subscription2


class SubscriptionResponse1(object):

    """Implementation of the 'SubscriptionResponse1' model.

    TODO: type model description here.

    Attributes:
        account_name (string): TODO: type description here.
        subscription_list (list of Subscription2): TODO: type description
            here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "account_name": 'accountName',
        "subscription_list": 'subscriptionList'
    }

    _optionals = [
        'account_name',
        'subscription_list',
    ]

    def __init__(self,
                 account_name=APIHelper.SKIP,
                 subscription_list=APIHelper.SKIP):
        """Constructor for the SubscriptionResponse1 class"""

        # Initialize members of the class
        if account_name is not APIHelper.SKIP:
            self.account_name = account_name 
        if subscription_list is not APIHelper.SKIP:
            self.subscription_list = subscription_list 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        account_name = dictionary.get("accountName") if dictionary.get("accountName") else APIHelper.SKIP
        subscription_list = None
        if dictionary.get('subscriptionList') is not None:
            subscription_list = [Subscription2.from_dictionary(x) for x in dictionary.get('subscriptionList')]
        else:
            subscription_list = APIHelper.SKIP
        # Return an object of this model
        return cls(account_name,
                   subscription_list)
