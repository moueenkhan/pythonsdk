# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.ern_response_item import ERNResponseItem
from mergedapi.models.locations import Locations


class GetClustersNamespaces(object):

    """Implementation of the 'GetClustersNamespaces' model.

    TODO: type model description here.

    Attributes:
        location (Locations): TODO: type description here.
        cluster (list of ERNResponseItem): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "location": 'location',
        "cluster": 'cluster'
    }

    _optionals = [
        'location',
        'cluster',
    ]

    def __init__(self,
                 location=APIHelper.SKIP,
                 cluster=APIHelper.SKIP):
        """Constructor for the GetClustersNamespaces class"""

        # Initialize members of the class
        if location is not APIHelper.SKIP:
            self.location = location 
        if cluster is not APIHelper.SKIP:
            self.cluster = cluster 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        location = Locations.from_dictionary(dictionary.get('location')) if 'location' in dictionary.keys() else APIHelper.SKIP
        cluster = None
        if dictionary.get('cluster') is not None:
            cluster = [ERNResponseItem.from_dictionary(x) for x in dictionary.get('cluster')]
        else:
            cluster = APIHelper.SKIP
        # Return an object of this model
        return cls(location,
                   cluster)
