# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.repository import Repository
from mergedapi.models.revision import Revision


class VirtualMachine(object):

    """Implementation of the 'VirtualMachine' model.

    TODO: type model description here.

    Attributes:
        repository (Repository): TODO: type description here.
        revision (Revision): TODO: type description here.
        template_type (TemplateTypeEnum): type of the template to be used for
            deployment
        values (Repository): TODO: type description here.
        provider (CloudProviderEnum): Cloud provider where you plan to
            provision and operate your Kubernetes cluster

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "repository": 'repository',
        "template_type": 'templateType',
        "revision": 'revision',
        "values": 'values',
        "provider": 'provider'
    }

    _optionals = [
        'revision',
        'values',
        'provider',
    ]

    def __init__(self,
                 repository=None,
                 template_type='Terraform',
                 revision=APIHelper.SKIP,
                 values=APIHelper.SKIP,
                 provider=APIHelper.SKIP):
        """Constructor for the VirtualMachine class"""

        # Initialize members of the class
        self.repository = repository 
        if revision is not APIHelper.SKIP:
            self.revision = revision 
        self.template_type = template_type 
        if values is not APIHelper.SKIP:
            self.values = values 
        if provider is not APIHelper.SKIP:
            self.provider = provider 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        repository = Repository.from_dictionary(dictionary.get('repository')) if dictionary.get('repository') else None
        template_type = dictionary.get("templateType") if dictionary.get("templateType") else 'Terraform'
        revision = Revision.from_dictionary(dictionary.get('revision')) if 'revision' in dictionary.keys() else APIHelper.SKIP
        values = Repository.from_dictionary(dictionary.get('values')) if 'values' in dictionary.keys() else APIHelper.SKIP
        provider = dictionary.get("provider") if dictionary.get("provider") else APIHelper.SKIP
        # Return an object of this model
        return cls(repository,
                   template_type,
                   revision,
                   values,
                   provider)
