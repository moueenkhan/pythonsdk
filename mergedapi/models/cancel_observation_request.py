# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.device import Device
from mergedapi.models.observation_request_attribute import ObservationRequestAttribute


class CancelObservationRequest(object):

    """Implementation of the 'CancelObservationRequest' model.

    Specification of diagnostics services you want to cancel.

    Attributes:
        transaction_id (string): transactionID identifier
        account_name (string): Account identifier in "##########-#####".
        devices (list of Device): list of devices
        attributes (list of ObservationRequestAttribute): Attributes are
            streaming RF parameters that you want to observe.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "transaction_id": 'transactionID',
        "account_name": 'accountName',
        "devices": 'devices',
        "attributes": 'attributes'
    }

    _optionals = [
        'devices',
        'attributes',
    ]

    def __init__(self,
                 transaction_id=None,
                 account_name=None,
                 devices=APIHelper.SKIP,
                 attributes=APIHelper.SKIP):
        """Constructor for the CancelObservationRequest class"""

        # Initialize members of the class
        self.transaction_id = transaction_id 
        self.account_name = account_name 
        if devices is not APIHelper.SKIP:
            self.devices = devices 
        if attributes is not APIHelper.SKIP:
            self.attributes = attributes 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        transaction_id = dictionary.get("transactionID") if dictionary.get("transactionID") else None
        account_name = dictionary.get("accountName") if dictionary.get("accountName") else None
        devices = None
        if dictionary.get('devices') is not None:
            devices = [Device.from_dictionary(x) for x in dictionary.get('devices')]
        else:
            devices = APIHelper.SKIP
        attributes = None
        if dictionary.get('attributes') is not None:
            attributes = [ObservationRequestAttribute.from_dictionary(x) for x in dictionary.get('attributes')]
        else:
            attributes = APIHelper.SKIP
        # Return an object of this model
        return cls(transaction_id,
                   account_name,
                   devices,
                   attributes)
