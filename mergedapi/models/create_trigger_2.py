# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from mergedapi.api_helper import APIHelper
from mergedapi.models.anomalyattributes import Anomalyattributes
from mergedapi.models.notificationarray import Notificationarray


class CreateTrigger2(object):

    """Implementation of the 'createTrigger2' model.

    Trigger Details

    Attributes:
        anomalyattributes (Anomalyattributes): The details of the UsageAnomaly
            trigger.
        notification (Notificationarray): The notification details of the
            trigger.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "anomalyattributes": 'anomalyattributes',
        "notification": 'notification'
    }

    _optionals = [
        'anomalyattributes',
        'notification',
    ]

    def __init__(self,
                 anomalyattributes=APIHelper.SKIP,
                 notification=APIHelper.SKIP):
        """Constructor for the CreateTrigger2 class"""

        # Initialize members of the class
        if anomalyattributes is not APIHelper.SKIP:
            self.anomalyattributes = anomalyattributes 
        if notification is not APIHelper.SKIP:
            self.notification = notification 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary

        anomalyattributes = Anomalyattributes.from_dictionary(dictionary.get('anomalyattributes')) if 'anomalyattributes' in dictionary.keys() else APIHelper.SKIP
        notification = Notificationarray.from_dictionary(dictionary.get('notification')) if 'notification' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(anomalyattributes,
                   notification)
