# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.get_service import GetService
from mergedapi.models.all_service_instance_response import AllServiceInstanceResponse
from mergedapi.exceptions.response_error_exception import ResponseErrorException


class ServiceInstanceOperationsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ServiceInstanceOperationsController, self).__init__(config)

    def service_instance_retrive(self,
                                 service_instance_id,
                                 account_name,
                                 cluster=False):
        """Does a GET request to /v1/service/instances/{serviceInstanceId}.

        Retrive a Service Instance

        Args:
            service_instance_id (string): TODO: type description here.
            account_name (string): TODO: type description here.
            cluster (bool, optional): TODO: type description here. Example:
                false

        Returns:
            GetService: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/service/instances/{serviceInstanceId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serviceInstanceId')
                            .value(service_instance_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .query_param(Parameter()
                         .key('cluster')
                         .value(cluster))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetService.from_dictionary)
            .local_error('400', 'Bad Request', ResponseErrorException)
            .local_error('401', 'Unauthorized', ResponseErrorException)
            .local_error('403', 'Forbidden', ResponseErrorException)
            .local_error('404', 'Not found', ResponseErrorException)
            .local_error('415', 'Unsupported media type', ResponseErrorException)
            .local_error('429', 'Too many requests', ResponseErrorException)
            .local_error('500', 'Internal Server Error', ResponseErrorException)
        ).execute()

    def all_instance_retrieve(self,
                              account_name,
                              offset=None,
                              state=None,
                              limit=None,
                              searchbyname=None,
                              listofstate=None):
        """Does a GET request to /v1/service/instances.

        Retrieve all instances for all services

        Args:
            account_name (string): TODO: type description here.
            offset (string, optional): TODO: type description here.
            state (string, optional): TODO: type description here.
            limit (string, optional): TODO: type description here.
            searchbyname (string, optional): TODO: type description here.
            listofstate (list of string, optional): TODO: type description
                here.

        Returns:
            AllServiceInstanceResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/service/instances')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .query_param(Parameter()
                         .key('offset')
                         .value(offset))
            .query_param(Parameter()
                         .key('state')
                         .value(state))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('searchbyname')
                         .value(searchbyname))
            .query_param(Parameter()
                         .key('listofstate')
                         .value(listofstate))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AllServiceInstanceResponse.from_dictionary)
            .local_error('400', 'Bad Request', ResponseErrorException)
            .local_error('401', 'Unauthorized', ResponseErrorException)
            .local_error('403', 'Forbidden', ResponseErrorException)
            .local_error('404', 'Not found', ResponseErrorException)
            .local_error('415', 'Unsupported media type', ResponseErrorException)
            .local_error('429', 'Too many requests', ResponseErrorException)
            .local_error('500', 'Internal Server Error', ResponseErrorException)
        ).execute()
