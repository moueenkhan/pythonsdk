# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.callback import Callback
from mergedapi.models.callback_1 import Callback1
from mergedapi.models.callback_registration_response import CallbackRegistrationResponse
from mergedapi.models.success_response import SuccessResponse
from mergedapi.models.callback_summary import CallbackSummary
from mergedapi.models.callback_resp import CallbackResp
from mergedapi.models.success_response_1 import SuccessResponse1
from mergedapi.models.callback_request import CallbackRequest
from mergedapi.models.callback_2 import Callback2
from mergedapi.models.callback_registration_response_1 import CallbackRegistrationResponse1
from mergedapi.models.call_back_created import CallBackCreated
from mergedapi.models.api_response_code import ApiResponseCode
from mergedapi.exceptions.error_exception import ErrorException
from mergedapi.exceptions.rest_error_response_exception import RestErrorResponseException
from mergedapi.exceptions.error_response_error_2_exception import ErrorResponseError2Exception


class CallbacksController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(CallbacksController, self).__init__(config)

    def get_diagnostics_subscription_callback_info(self,
                                                   account_name):
        """Does a GET request to /callbacks.

        This endpoint allows user to get the registered callback information
        of an existing diagnostics subscription

        Args:
            account_name (string): Account identifier

        Returns:
            Callback: Response from the API. Return callback registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT4)
            .path('/callbacks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('accountName')
                         .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Callback.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def register_diagnostics_callback_url(self,
                                          body):
        """Does a POST request to /callbacks.

        This endpoint allows user update the callback HTTPS address of an
        existing diagnostics subscription

        Args:
            body (CallbackRegistrationRequest): Callback Url Registration

        Returns:
            Callback: Response from the API. Return callback registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT4)
            .path('/callbacks')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Callback.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def unregister_diagnostics_callback(self,
                                        account_name,
                                        service_name):
        """Does a DELETE request to /callbacks.

        This endpoint allows user to delete a registered callback Url and
        credential.

        Args:
            account_name (string): Account identifier
            service_name (string): Service name for Callback Notification

        Returns:
            Callback: Response from the API. Return callback registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT4)
            .path('/callbacks')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('accountName')
                         .value(account_name))
            .query_param(Parameter()
                         .key('serviceName')
                         .value(service_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Callback.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def get_registered_callback_ur_ls(self,
                                      account):
        """Does a GET request to /callbacks/{account}.

        Returns a list of all registered callback URLs for the account.

        Args:
            account (string): account number

        Returns:
            list of Callback1: Response from the API. Callbacks response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Callback1.from_dictionary)
            .local_error('400', 'Error', ErrorException)
        ).execute()

    def register_callback_url(self,
                              account,
                              body):
        """Does a POST request to /callbacks/{account}.

        Provide a URL to receive messages from a ThingSpace callback service.

        Args:
            account (string): account number
            body (Callback1): callback registration information

        Returns:
            CallbackRegistrationResponse: Response from the API. Callback
                registration response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRegistrationResponse.from_dictionary)
            .local_error('400', 'Error', ErrorException)
        ).execute()

    def deregister_callback_url(self,
                                account,
                                service):
        """Does a DELETE request to /callbacks/{account}/name/{service}.

        Deregister a URL to stop receiving callback messages.

        Args:
            account (string): account number
            service (CallbackServiceNameEnum): callback service name

        Returns:
            SuccessResponse: Response from the API. Deregistration successful

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/callbacks/{account}/name/{service}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('service')
                            .value(service)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse.from_dictionary)
            .local_error('400', 'Error', ErrorException)
        ).execute()

    def get_registered_callback_information(self,
                                            account):
        """Does a GET request to /callbacks/{account}.

        This endpoint allows user to get the registered callback information.

        Args:
            account (string): Account identifier

        Returns:
            CallbackSummary: Response from the API. Return callback
                registration.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackSummary.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def update_https_callback_address(self,
                                      account,
                                      body):
        """Does a PUT request to /callbacks/{account}.

        This endpoint allows user to update the HTTPS callback address.

        Args:
            account (string): Account identifier
            body (CallbackRequest): Callback Url registration

        Returns:
            CallbackResp: Response from the API. Return callback
                registration.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackResp.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def create_https_callback_address(self,
                                      account,
                                      body):
        """Does a POST request to /callbacks/{account}.

        This endpoint allows user to create the HTTPS callback address.

        Args:
            account (string): Account identifier
            body (CallbackRequest): Callback Url registration

        Returns:
            CallbackResp: Response from the API. Return callback
                registration.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackResp.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def delete_registered_callback(self,
                                   account):
        """Does a DELETE request to /callbacks/{account}.

        This endpoint allows user to delete a previously registered callback
        Url.

        Args:
            account (string): Account identifier

        Returns:
            SuccessResponse1: Response from the API. Return delete result.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def registered_callback_information(self,
                                        acc):
        """Does a GET request to /callbacks/{acc}.

        This endpoint allows user to get the registered callback information

        Args:
            acc (string): Account identifier

        Returns:
            CallbackRequest: Response from the API. Return callback
                registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/callbacks/{acc}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRequest.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def update_https_callback_address_1(self,
                                        acc,
                                        body):
        """Does a PUT request to /callbacks/{acc}.

        This endpoint allows the user to update the HTTPS callback address

        Args:
            acc (string): Account identifier
            body (CallbackRequest): Callback Url registration

        Returns:
            CallbackRequest: Response from the API. Return callback
                registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/callbacks/{acc}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRequest.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def create_https_callback_address_1(self,
                                        acc,
                                        body):
        """Does a POST request to /callbacks/{acc}.

        This endpoint allows the user to create the HTTPS callback address

        Args:
            acc (string): Account identifier
            body (CallbackRequest): Callback Url registration

        Returns:
            CallbackRequest: Response from the API. Return callback
                registration

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/callbacks/{acc}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRequest.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def delete_https_callback_address(self,
                                      acc):
        """Does a DELETE request to /callbacks/{acc}.

        This endpoint allows user to delete a previously registered callback
        URL

        Args:
            acc (string): Account identifier

        Returns:
            SuccessResponse1: Response from the API. Delete request result

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/callbacks/{acc}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def list_callbacks_using_get(self,
                                 aname):
        """Does a GET request to /callbacks/{aname}.

        Returns the name and endpoint URL of the callback listening services
        registered for a given account.

        Args:
            aname (string): Account name

        Returns:
            list of Callback2: Response from the API. Callback response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT9)
            .path('/callbacks/{aname}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('aname')
                            .value(aname)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Callback2.from_dictionary)
            .local_error('400', 'Error Response', RestErrorResponseException)
        ).execute()

    def register_callback_using_post(self,
                                     aname,
                                     body):
        """Does a POST request to /callbacks/{aname}.

        You are responsible for creating and running a listening process on
        your server at that URL.

        Args:
            aname (string): Account name
            body (RegisterCallbackRequest): Request

        Returns:
            CallbackRegistrationResponse1: Response from the API. Callback
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT9)
            .path('/callbacks/{aname}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('aname')
                            .value(aname)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRegistrationResponse1.from_dictionary)
            .local_error('400', 'Error Response', RestErrorResponseException)
        ).execute()

    def unregister_callback_using_delete(self,
                                         aname,
                                         sname):
        """Does a DELETE request to /callbacks/{aname}/name/{sname}.

        Stops ThingSpace from sending callback messages for the specified
        account and service.

        Args:
            aname (string): Account name
            sname (string): Service name

        Returns:
            CallbackRegistrationResponse1: Response from the API. Callback
                response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT9)
            .path('/callbacks/{aname}/name/{sname}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('aname')
                            .value(aname)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('sname')
                            .value(sname)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRegistrationResponse1.from_dictionary)
            .local_error('400', 'Error Response', RestErrorResponseException)
        ).execute()

    def callbacks_account_number_get(self,
                                     account_number):
        """Does a GET request to /callbacks.

        Find registered callback listener for account by account number.

        Args:
            account_number (string): A unique identifier for an account.

        Returns:
            list of CallBackCreated: Response from the API. A successful
                response will display the billing account number (`aname`),
                the name of the callback service (`name`) and the address of
                the callback listening service (`url`).

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT10)
            .path('/callbacks')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('accountNumber')
                         .value(account_number))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallBackCreated.from_dictionary)
            .local_error('400', 'Bad request.', ErrorResponseError2Exception)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', ErrorResponseError2Exception)
            .local_error('403', 'Forbidden request.', ErrorResponseError2Exception)
            .local_error('404', 'Bad request. Not found.', ErrorResponseError2Exception)
            .local_error('409', 'Bad request. Conflict state.', ErrorResponseError2Exception)
            .local_error('500', 'Internal Server Error.', ErrorResponseError2Exception)
        ).execute()

    def callbacks_account_number_post(self,
                                      account_number,
                                      name,
                                      url,
                                      body=None):
        """Does a POST request to /callbacks.

        Registers a URL at which an account receives asynchronous responses
        and other messages from a ThingSpace Platform callback service. The
        messages are REST messages. You are responsible for creating and
        running a listening process on your server at that URL to receive and
        parse the messages.

        Args:
            account_number (string): A unique identifier for an account.
            name (string): The name to be assigned to the lister service
            url (string): The address of the listerner service
            body (CallBack3, optional): TODO: type description here.

        Returns:
            CallBackCreated: Response from the API. A successful response will
                display the billing account number (`aname`), the name of the
                callback service (`name`) and the address of the callback
                listening service (`url`).

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT10)
            .path('/callbacks')
            .http_method(HttpMethodEnum.POST)
            .query_param(Parameter()
                         .key('accountNumber')
                         .value(account_number))
            .header_param(Parameter()
                          .key('name')
                          .value(name))
            .header_param(Parameter()
                          .key('url')
                          .value(url))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallBackCreated.from_dictionary)
            .local_error('400', 'Bad request.', ErrorResponseError2Exception)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', ErrorResponseError2Exception)
            .local_error('403', 'Forbidden request.', ErrorResponseError2Exception)
            .local_error('404', 'Bad request. Not found.', ErrorResponseError2Exception)
            .local_error('409', 'Bad request. Conflict state.', ErrorResponseError2Exception)
            .local_error('500', 'Internal Server Error.', ErrorResponseError2Exception)
        ).execute()

    def callbacks_account_number_name_service_delete(self,
                                                     account_number,
                                                     name):
        """Does a DELETE request to /callbacks.

        Stops ThingSpace from sending callback messages for the specified
        account and listener name.

        Args:
            account_number (string): A unique identifier for a `Account`.
            name (string): The name of the callback service that will be
                deleted

        Returns:
            ApiResponseCode: Response from the API. Successful response (no
                content).

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT10)
            .path('/callbacks')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('accountNumber')
                         .value(account_number))
            .query_param(Parameter()
                         .key('name')
                         .value(name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ApiResponseCode.from_dictionary)
            .local_error('400', 'Bad request.', ErrorResponseError2Exception)
            .local_error('401', 'Unauthorized request. Access token is missing or invalid.', ErrorResponseError2Exception)
            .local_error('403', 'Forbidden request.', ErrorResponseError2Exception)
            .local_error('404', 'Bad request. Not found.', ErrorResponseError2Exception)
            .local_error('409', 'Bad request. Conflict state.', ErrorResponseError2Exception)
            .local_error('500', 'Internal Server Error.', ErrorResponseError2Exception)
        ).execute()
