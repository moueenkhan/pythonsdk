# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.subscription_response import SubscriptionResponse
from mergedapi.models.subscription import Subscription
from mergedapi.models.subscription_1 import Subscription1
from mergedapi.models.subscription_query_response import SubscriptionQueryResponse
from mergedapi.models.license_query_response import LicenseQueryResponse
from mergedapi.exceptions.error_exception import ErrorException


class SubscriptionsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(SubscriptionsController, self).__init__(config)

    def create_a_subscription(self,
                              body):
        """Does a POST request to /subscriptions.

        Create a subscription to define a streaming channel that sends data
        from devices in the account to an endpoint defined in a target
        resource.

        Args:
            body (CreateASubscriptionRequest): The request body provides the
                details of the subscription that you want to create.

        Returns:
            SubscriptionResponse: Response from the API. Returns full
                subscription resource definition

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT3)
            .path('/subscriptions')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionResponse.from_dictionary)
        ).execute()

    def query_a_subscription(self,
                             body):
        """Does a POST request to /subscriptions/actions/query.

        Search for subscriptions by property values. Returns an array of all
        matching subscription resources.

        Args:
            body (QueryASubscriptionRequest): The request body specifies
                fields and values to match.

        Returns:
            list of SubscriptionResponse: Response from the API. Returns an
                array of all matching subscriptions. Each subscription
                includes the full subscription resource definition.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT3)
            .path('/subscriptions/actions/query')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionResponse.from_dictionary)
        ).execute()

    def delete_a_subscription(self,
                              body):
        """Does a POST request to /subscriptions/actions/delete.

        Remove a subscription from a ThingSpace account.

        Args:
            body (DeleteaSubscriptionRequest): The request body identifies the
                subscription to delete.

        Returns:
            void: Response from the API. Subscription deleted successfully.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT3)
            .path('/subscriptions/actions/delete')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).execute()

    def get_diagnostics_subscription(self,
                                     account_name):
        """Does a GET request to /subscriptions.

        This endpoint retrieves a diagnostics subscription by account

        Args:
            account_name (string): Account identifier

        Returns:
            Subscription: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT4)
            .path('/subscriptions')
            .http_method(HttpMethodEnum.GET)
            .query_param(Parameter()
                         .key('accountName')
                         .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Subscription.from_dictionary)
        ).execute()

    def get_location_subscription_status(self,
                                         account):
        """Does a GET request to /subscriptions/{account}.

        This subscriptions endpoint retrieves an account's current location
        subscription status.

        Args:
            account (string): Account identifier in "##########-#####"

        Returns:
            Subscription1: Response from the API. Location subscription
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/subscriptions/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Subscription1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def get_billable_usage_stats_for_accounts(self,
                                              body):
        """Does a POST request to /usage.

        This endpoint allows user to search for billable usage for accounts
        based on the provided date range

        Args:
            body (UsageRequest): bill usage request

        Returns:
            object: Response from the API. bill usage response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/usage')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def subscription_query_using_get(self,
                                     account):
        """Does a GET request to /subscriptions/{account}.

        This subscriptions endpoint retrieves an account's current Software
        Management Service subscription status.

        Args:
            account (string): Account identifier in "##########-#####"

        Returns:
            SubscriptionQueryResponse: Response from the API. Account
                subscription information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/subscriptions/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def license_query_using_get(self,
                                account):
        """Does a GET request to /licenses/{account}.

        Returns information about an account's Software Management Services
        licenses and a list of licensed devices.

        Args:
            account (string): Account identifier in "##########-#####"

        Returns:
            LicenseQueryResponse: Response from the API. Account license
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/licenses/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def get_fota_subscription(self,
                              account):
        """Does a GET request to /subscriptions/{account}.

        This endpoint retrieves a fota subscription by account.

        Args:
            account (string): Account identifier

        Returns:
            SubscriptionQueryResponse: Response from the API. Fota
                Subscription.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/subscriptions/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def get_a_fota_subscription(self,
                                acc):
        """Does a GET request to /subscriptions/{acc}.

        This endpoint retrieves a fota subscription by account

        Args:
            acc (string): Account identifier

        Returns:
            SubscriptionQueryResponse: Response from the API. Fota
                Subscription

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/subscriptions/{acc}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SubscriptionQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
