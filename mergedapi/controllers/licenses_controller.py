# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from deprecation import deprecated
from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.license_summary import LicenseSummary
from mergedapi.models.license_response import LicenseResponse
from mergedapi.models.license_response_1 import LicenseResponse1
from mergedapi.exceptions.error_exception import ErrorException


class LicensesController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(LicensesController, self).__init__(config)

    def get_user_fota_licenses_summary(self,
                                       account,
                                       last_seen_device_id=None):
        """Does a GET request to /licenses/{account}.

        The endpoint allows user to list license usage.

        Args:
            account (string): Account identifier
            last_seen_device_id (string, optional): Last seen device
                identifier

        Returns:
            LicenseSummary: Response from the API. Summary of license
                assignment.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/licenses/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseSummary.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    @deprecated()
    def assign_fota_licenses_to_devices(self,
                                        account,
                                        body):
        """Does a POST request to /licenses/{account}/assign.

        This endpoint allows user to assign licenses to a list of devices.

        Args:
            account (string): Account identifier
            body (LicenseIMEI): License assignment

        Returns:
            LicenseResponse: Response from the API. License assignment
                result.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/licenses/{account}/assign')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    @deprecated()
    def remove_licenses_from_devices(self,
                                     account,
                                     body):
        """Does a POST request to /licenses/{account}/remove.

        This endpoint allows user to remove licenses from a list of devices.

        Args:
            account (string): Account identifier
            body (LicenseIMEI): License removal

        Returns:
            LicenseResponse: Response from the API. License removal result.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/licenses/{account}/remove')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def summarize_fota_licenses_assignment(self,
                                           acc,
                                           last_seen_device_id=None):
        """Does a GET request to /licenses/{acc}.

        The endpoint allows user to list license usage

        Args:
            acc (string): Account identifier
            last_seen_device_id (string, optional): Last seen device
                identifier

        Returns:
            LicenseSummary: Response from the API. Summary of license
                assignment

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/licenses/{acc}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('lastSeenDeviceId')
                         .value(last_seen_device_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseSummary.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def assign_fota_licenses_to_devices_1(self,
                                          acc,
                                          body):
        """Does a POST request to /licenses/{acc}/assign.

        This endpoint allows user to assign licenses to a list of devices

        Args:
            acc (string): Account identifier
            body (LicensesAssignedRemovedRequest): License assignment

        Returns:
            LicenseResponse1: Response from the API. License assignment
                result

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/licenses/{acc}/assign')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def remove_licenses_from_devices_1(self,
                                       acc,
                                       body):
        """Does a POST request to /licenses/{acc}/remove.

        This endpoint allows user to remove licenses from a list of devices

        Args:
            acc (string): Account identifier
            body (LicensesAssignedRemovedRequest): License removal.

        Returns:
            LicenseResponse1: Response from the API. License removal result

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/licenses/{acc}/remove')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicenseResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
