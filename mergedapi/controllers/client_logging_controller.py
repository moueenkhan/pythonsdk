# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.device_logging_status import DeviceLoggingStatus
from mergedapi.models.device_log import DeviceLog
from mergedapi.exceptions.error_exception import ErrorException


class ClientLoggingController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ClientLoggingController, self).__init__(config)

    def get_logging_enabled_devices_list(self,
                                         account):
        """Does a GET request to /logging/{account}/devices.

        Returns an array of all devices in the specified account for which
        logging is enabled.

        Args:
            account (string): Account identifier

        Returns:
            list of DeviceLoggingStatus: Response from the API. List
                containing device logging status information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/logging/{account}/devices')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceLoggingStatus.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def enable_logging_for_devices_list(self,
                                        account,
                                        body):
        """Does a PUT request to /logging/{account}/devices.

        Each customer may have a maximum of 20 devices enabled for logging

        Args:
            account (string): Account identifier
            body (DeviceLoggingRequest): Device logging information

        Returns:
            list of DeviceLoggingStatus: Response from the API. List
                containing device logging status information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/logging/{account}/devices')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceLoggingStatus.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def disable_logging_for_devices_list(self,
                                         account,
                                         device_ids):
        """Does a DELETE request to /logging/{account}/devices.

        Turn logging off for a list of devices

        Args:
            account (string): Account identifier
            device_ids (string): the list of device IDs

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/logging/{account}/devices')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .query_param(Parameter()
                         .key('deviceIds')
                         .value(device_ids))
            .auth(Single('global'))
        ).execute()

    def enable_device_logging(self,
                              account,
                              device_id):
        """Does a PUT request to /logging/{account}/devices/{deviceId}.

        Enables logging for a specific device.

        Args:
            account (string): Account identifier
            device_id (string): Device IMEI identifier

        Returns:
            DeviceLoggingStatus: Response from the API. Device logging status
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/logging/{account}/devices/{deviceId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('deviceId')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceLoggingStatus.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def delete_device_logging(self,
                              account,
                              device_id):
        """Does a DELETE request to /logging/{account}/devices/{deviceId}.

        Disables logging for a specific device.

        Args:
            account (string): Account identifier
            device_id (string): Device IMEI identifier

        Returns:
            void: Response from the API. Success

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/logging/{account}/devices/{deviceId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('deviceId')
                            .value(device_id)
                            .should_encode(True))
            .auth(Single('global'))
        ).execute()

    def get_device_logs(self,
                        account,
                        device_id):
        """Does a GET request to /logging/{account}/devices/{deviceId}/logs.

        Gets logs for a specific device.

        Args:
            account (string): Account identifier
            device_id (string): Device IMEI identifier

        Returns:
            list of DeviceLog: Response from the API. List of device logs

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/logging/{account}/devices/{deviceId}/logs')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('deviceId')
                            .value(device_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceLog.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
