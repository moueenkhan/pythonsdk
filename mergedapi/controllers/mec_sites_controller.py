# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.location_ok_response import LocationOKResponse
from mergedapi.models.get_clusters_namespaces import GetClustersNamespaces
from mergedapi.exceptions.response_error_exception import ResponseErrorException


class MECSitesController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(MECSitesController, self).__init__(config)

    def get_mec_site_locations(self,
                               account_name=None):
        """Does a GET request to /v1/mecsite/locations.

        API to support fetching of all MEC locations so that the user can view
        the city

        Args:
            account_name (string, optional): TODO: type description here.

        Returns:
            LocationOKResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/mecsite/locations')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationOKResponse.from_dictionary)
            .local_error('400', 'Error Response', ResponseErrorException)
        ).execute()

    def get_cluster_namespaces(self,
                               ern,
                               account_name=None):
        """Does a GET request to /v1/mecsite/{ERN}/cluster/.

        Get list of cluster and namespaces for a given ERN

        Args:
            ern (string): TODO: type description here.
            account_name (string, optional): TODO: type description here.

        Returns:
            GetClustersNamespaces: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/mecsite/{ERN}/cluster/')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('ERN')
                            .value(ern)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetClustersNamespaces.from_dictionary)
            .local_error('400', 'Bad Request', ResponseErrorException)
            .local_error('404', 'Not found', ResponseErrorException)
            .local_error('500', 'Internal Server Error', ResponseErrorException)
        ).execute()
