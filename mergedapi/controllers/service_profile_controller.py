# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.services_profile_registration import ServicesProfileRegistration
from mergedapi.models.error_response import ErrorResponse
from mergedapi.exceptions.response_error_exception import ResponseErrorException


class ServiceProfileController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ServiceProfileController, self).__init__(config)

    def create_service_profile(self,
                               account_name,
                               body):
        """Does a POST request to /v1/service/profile.

        Creates a service profile that describes the resource requirements of
        a service.

        Args:
            account_name (string): TODO: type description here.
            body (PostServiceProfile): The request body passes all of the
                needed parameters to create a service profile.

        Returns:
            ServicesProfileRegistration: Response from the API. service
                profile ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/service/profile')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServicesProfileRegistration.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', ResponseErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', ResponseErrorException)
        ).execute()

    def update_service_profile(self,
                               id,
                               body,
                               account_name=None):
        """Does a PUT request to /v1/service/profile/{Id}.

        Update the definition of a Service Profile.

        Args:
            id (string): TODO: type description here.
            body (PostServiceProfile): The request body passes the rest of the
                needed parameters to create a service profile. Parameters
                other than `serviceProfileId` will be edited
            account_name (string, optional): TODO: type description here.

        Returns:
            ServicesProfileRegistration: Response from the API. service
                profile ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/service/profile/{Id}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('Id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServicesProfileRegistration.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', ResponseErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', ResponseErrorException)
        ).execute()

    def submit_service_profile(self,
                               id,
                               body,
                               account_name=None):
        """Does a PUT request to /v1/service/profile/{id}/submit.

        Submit a service profile

        Args:
            id (string): TODO: type description here.
            body (ServicesProfileRegistration): The request body passes all of
                the needed parameters to create a service profile.
            account_name (string, optional): TODO: type description here.

        Returns:
            ErrorResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/service/profile/{id}/submit')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('id')
                            .value(id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ErrorResponse.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', ResponseErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', ResponseErrorException)
            .local_error('412', 'Precondition Failed', ResponseErrorException)
            .local_error('500', 'Internal Server Error', ResponseErrorException)
        ).execute()
