# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.location import Location
from mergedapi.models.device_location_response import DeviceLocationResponse
from mergedapi.models.transaction_id import TransactionID
from mergedapi.models.location_report_response import LocationReportResponse
from mergedapi.models.location_report import LocationReport
from mergedapi.models.location_report_status import LocationReportStatus
from mergedapi.exceptions.error_exception import ErrorException


class LocationsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(LocationsController, self).__init__(config)

    def get_devices_locations_synchronous(self,
                                          body):
        """Does a POST request to /locations.

        This locations endpoint retrieves the locations for a list of
        devices.

        Args:
            body (LocationRequest): location request

        Returns:
            list of Location: Response from the API. Device locations

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/locations')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Location.from_dictionary)
        ).execute()

    def get_devices_locations_asynchronous(self,
                                           body):
        """Does a POST request to /devicelocations.

        Requests the current or cached location of up to 10,000 IoT or
        consumer devices (phones, tablets. etc.). This request returns a
        synchronous transaction ID, and the location information for each
        device is returned asynchronously as a DeviceLocation callback
        message

        Args:
            body (LocationRequest): location request

        Returns:
            DeviceLocationResponse: Response from the API. Request accepted;
                location report in progress

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/devicelocations')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeviceLocationResponse.from_dictionary)
        ).execute()

    def cancel_device_location_request(self,
                                       accountname,
                                       txid):
        """Does a DELETE request to /devicelocations/{txid}.

        Cancel a queued or unfinished device location request

        Args:
            accountname (string): Account identifier in "##########-#####"
            txid (string): Transaction ID of the request to cancel, from the
                synchronous response to the original request

        Returns:
            TransactionID: Response from the API. Request canceled

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/devicelocations/{txid}')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('accountname')
                         .value(accountname))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TransactionID.from_dictionary)
        ).execute()

    def create_location_report(self,
                               body):
        """Does a POST request to /locationreports.

        Request an asynchronous device location report

        Args:
            body (LocationRequest): location request

        Returns:
            LocationReportResponse: Response from the API. Request accepted;
                location report in progress

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/locationreports')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationReportResponse.from_dictionary)
        ).execute()

    def retrieve_location_report(self,
                                 account,
                                 txid,
                                 startindex):
        """Does a GET request to /locationreports/{account}/report/{txid}/index/{startindex}.

        Download a completed asynchronous device location report

        Args:
            account (string): Account identifier in "##########-#####"
            txid (string): Transaction ID from POST /locationreports response
            startindex (int): Zero-based number of the first record to return

        Returns:
            LocationReport: Response from the API. Location information for up
                to 1,000 devices

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/locationreports/{account}/report/{txid}/index/{startindex}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('startindex')
                            .value(startindex)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationReport.from_dictionary)
        ).execute()

    def get_location_report_status(self,
                                   account,
                                   txid):
        """Does a GET request to /locationreports/{account}/report/{txid}/status.

        Returns the current status of a requested device location report

        Args:
            account (string): Account identifier in "##########-#####"
            txid (string): Transaction ID of the report

        Returns:
            LocationReportStatus: Response from the API. Location report
                status

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/locationreports/{account}/report/{txid}/status')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LocationReportStatus.from_dictionary)
        ).execute()

    def cancel_queued_location_report_generation(self,
                                                 account,
                                                 txid):
        """Does a DELETE request to /locationreports/{account}/report/{txid}.

        Cancel a queued device location report

        Args:
            account (string): Account identifier in "##########-#####"
            txid (string): Transaction ID of the report to cancel

        Returns:
            TransactionID: Response from the API. Report generation canceled

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT5)
            .path('/locationreports/{account}/report/{txid}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('txid')
                            .value(txid)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TransactionID.from_dictionary)
        ).execute()
