# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from deprecation import deprecated
from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.licenses_assigned_removed_response import LicensesAssignedRemovedResponse
from mergedapi.models.cancellation_candidate_create_response import CancellationCandidateCreateResponse
from mergedapi.models.success_response import SuccessResponse
from mergedapi.models.cancellation_candidate_query_response import CancellationCandidateQueryResponse
from mergedapi.exceptions.error_exception import ErrorException


class LicenseManagementController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(LicenseManagementController, self).__init__(config)

    @deprecated()
    def assign_licenses_using_post(self,
                                   account,
                                   body):
        """Does a POST request to /licenses/{account}/assign.

        Assigns licenses to a specified list of devices so that firmware
        upgrades can be scheduled for those devices.

        Args:
            account (string): Account identifier in "##########-#####"
            body (LicensesAssignedRemovedRequest): IMEIs of the devices to
                assign licenses to

        Returns:
            LicensesAssignedRemovedResponse: Response from the API. List of
                licenses assigned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/licenses/{account}/assign')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesAssignedRemovedResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    @deprecated()
    def remove_licenses_using_post(self,
                                   account,
                                   body):
        """Does a POST request to /licenses/{account}/remove.

        Remove unused licenses from device.

        Args:
            account (string): Account identifier in "##########-#####"
            body (LicensesAssignedRemovedRequest): IMEIs of the devices to
                assign licenses to

        Returns:
            LicensesAssignedRemovedResponse: Response from the API. List of
                licenses assigned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/licenses/{account}/remove')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(LicensesAssignedRemovedResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    @deprecated()
    def createcancellation_candidate_list_using_post(self,
                                                     account,
                                                     body):
        """Does a POST request to /licenses/{account}/cancel.

        Creates a list of devices from which licenses will be removed if the
        number of MRC licenses becomes less than the number of assigned
        licenses.

        Args:
            account (string): Account identifier in "##########-#####"
            body (CancellationCandidateCreateRequest): cancellation candidate
                device list

        Returns:
            CancellationCandidateCreateResponse: Response from the API. List
                of licenses assigned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/licenses/{account}/cancel')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CancellationCandidateCreateResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    @deprecated()
    def deletecancellation_candidate_list_using_delete(self,
                                                       account):
        """Does a DELETE request to /licenses/{account}/cancel.

        Deletes the entire list of cancellation candidate devices.

        Args:
            account (string): Account identifier in "##########-#####"

        Returns:
            SuccessResponse: Response from the API. Upgrade canceled

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/licenses/{account}/cancel')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    @deprecated()
    def cancellation_candidate_query_using_get(self,
                                               account,
                                               start_index):
        """Does a GET request to /licenses/{account}/cancel/index/{startIndex}.

        Returns a list of devices from which licenses will be removed if the
        number of MRC licenses becomes less than the number of assigned
        licenses.

        Args:
            account (string): Account identifier in "##########-#####"
            start_index (string): The zero-based number of the first record to
                return. Set startIndex=0 for the first request. If there are
                more than 1,000 devices in the response, set startIndex=1000
                for the second request, 2000 for the third request, etc.

        Returns:
            CancellationCandidateQueryResponse: Response from the API. List of
                cancellation candidate devices

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/licenses/{account}/cancel/index/{startIndex}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('startIndex')
                            .value(start_index)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CancellationCandidateQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
