# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.trigger_response import TriggerResponse
from mergedapi.models.request_response_1 import RequestResponse1
from mergedapi.models.trigger_value_response import TriggerValueResponse
from mergedapi.exceptions.rest_error_response_error_1_exception import RestErrorResponseError1Exception


class TriggersController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(TriggersController, self).__init__(config)

    def create_anomaly_trigger(self,
                               body):
        """Does a POST request to /v2/triggers.

        Creates the trigger to identify an anomaly.

        Args:
            body (list of Creattriggerchunk): Create Trigger Request

        Returns:
            TriggerResponse: Response from the API. Create a Trigger for
                Anomaly Detection

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT11)
            .path('/v2/triggers')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TriggerResponse.from_dictionary)
        ).execute()

    def update_anomaly_trigger(self,
                               body):
        """Does a PUT request to /v2/triggers.

        Updates an existing trigger using the account name.

        Args:
            body (list of Creattriggerchunk1): Update Trigger Request

        Returns:
            RequestResponse1: Response from the API. Status of Request

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT11)
            .path('/v2/triggers')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RequestResponse1.from_dictionary)
        ).execute()

    def get_anomaly_trigger(self,
                            trigger_id):
        """Does a GET request to /v2/triggers/{triggerId}.

        Retrieves the values for a specific trigger ID

        Args:
            trigger_id (string): The trigger ID of a specific trigger

        Returns:
            TriggerValueResponse: Response from the API. Request response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT11)
            .path('/v2/triggers/{triggerId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('triggerId')
                            .value(trigger_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(TriggerValueResponse.from_dictionary)
        ).execute()
