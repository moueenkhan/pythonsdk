# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.get_all_claims_res import GetAllClaimsRes
from mergedapi.models.csp_response import CSPResponse
from mergedapi.exceptions.error_response_error_1_exception import ErrorResponseError1Exception


class ClaimsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ClaimsController, self).__init__(config)

    def get_service_claims(self,
                           account_name,
                           service_id,
                           correlation_id=None,
                           claim_status=None,
                           q=None,
                           limit=None,
                           off_set=None,
                           sort_key=None,
                           sort_dir=None,
                           details_flag=True):
        """Does a GET request to /v1/service/{serviceId}/claims.

        Use this API to fetch all service's claim(s) associated with a
        service. Service claims are generated based on service's compatibility
        with different cloud service provider.

        Args:
            account_name (string): User account name.
            service_id (string): Auto Generated Id of the claim whose
                information needs to be fetched.
            correlation_id (string, optional): TODO: type description here.
            claim_status (string, optional): queries with claim status on the
                claims
            q (string, optional): Use the comma (,) character to separate
                multiple values,eg claimType=Public
                MEC:claims.sandBoxState=NOT_STARTED,STARTED
            limit (long|int, optional): number of items to return
            off_set (long|int, optional): Id of the last respose value in the
                previous list
            sort_key (string, optional): Sorts the response by an attribute.
                Default is created_at
            sort_dir (SortDirectionEnum, optional): Sorts the response. Use
                asc for ascending or desc for descending order. The default is
                desc.
            details_flag (bool, optional): Default as true. If it is true then
                it will return all details.

        Returns:
            GetAllClaimsRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/service/{serviceId}/claims')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceId')
                            .value(service_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .query_param(Parameter()
                         .key('claimStatus')
                         .value(claim_status))
            .query_param(Parameter()
                         .key('q')
                         .value(q))
            .query_param(Parameter()
                         .key('limit')
                         .value(limit))
            .query_param(Parameter()
                         .key('offSet')
                         .value(off_set))
            .query_param(Parameter()
                         .key('sortKey')
                         .value(sort_key))
            .query_param(Parameter()
                         .key('sortDir')
                         .value(sort_dir))
            .query_param(Parameter()
                         .key('detailsFlag')
                         .value(details_flag))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetAllClaimsRes.from_dictionary)
            .local_error('400', 'Bad request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('404', 'Not found', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()

    def associate_cloud_credential_with_service_claim(self,
                                                      account_name,
                                                      service_id,
                                                      claim_id,
                                                      body,
                                                      correlation_id=None):
        """Does a POST request to /v1/services/{serviceId}/claims/{claimId}/associateCspProfile.

        Associate an existing cloud credential with a service's claim which
        will be used to connect to user's cloud provider

        Args:
            account_name (string): User account name.
            service_id (string): ServiceId System generated unique identifier
                which user is using.
            claim_id (string): ClaimId System generated unique identifier
                which user is using.
            body (CspProfileIdRequest): body
            correlation_id (string, optional): TODO: type description here.

        Returns:
            CSPResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceId}/claims/{claimId}/associateCspProfile')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceId')
                            .value(service_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('claimId')
                            .value(claim_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CSPResponse.from_dictionary)
            .local_error('400', 'Bad request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('404', 'Not Found', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()

    def mark_service_claim_status_completed(self,
                                            account_name,
                                            service_id,
                                            claim_id,
                                            correlation_id=None):
        """Does a POST request to /v1/services/{serviceId}/claims/{claimId}/claimStatusCompleted.

        Use this API to mark a servic's claim status as complete post
        successful verification of sandbox testing in the respective sandbox
        environment.

        Args:
            account_name (string): User account name.
            service_id (string): ServiceId System generated unique identifier
                which user is using.
            claim_id (string): ClaimId System generated unique identifier
                which user is using.
            correlation_id (string, optional): TODO: type description here.

        Returns:
            void: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceId}/claims/{claimId}/claimStatusCompleted')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceId')
                            .value(service_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('claimId')
                            .value(claim_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .auth(Single('global'))
        ).execute()

    def update_service_claim_status(self,
                                    account_name,
                                    service_id,
                                    claim_id,
                                    body,
                                    correlation_id=None):
        """Does a POST request to /v1/services/{serviceId}/claims/{claimId}/claimStatus.

        Using this API user can update service's claim status as
        complete/verified etc.

        Args:
            account_name (string): User account name.
            service_id (string): ServiceId System generated unique identifier
                which user is using.
            claim_id (string): ClaimId System generated unique identifier
                which user is using.
            body (ClaimStatus1): body
            correlation_id (string, optional): TODO: type description here.

        Returns:
            void: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceId}/claims/{claimId}/claimStatus')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceId')
                            .value(service_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('claimId')
                            .value(claim_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).execute()
