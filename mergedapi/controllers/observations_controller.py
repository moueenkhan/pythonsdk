# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.observation_ack_response import ObservationACKResponse
from mergedapi.models.cancel_observation_ack_response import CancelObservationACKResponse
from mergedapi.exceptions.error_exception import ErrorException


class ObservationsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ObservationsController, self).__init__(config)

    def start_diagnostics_observation(self,
                                      body):
        """Does a POST request to /devices/attributes/actions/observe.

        This endpoint allows the user to start or change observe diagnostics

        Args:
            body (ObservationRequest): Device Observe information

        Returns:
            ObservationACKResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT4)
            .path('/devices/attributes/actions/observe')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ObservationACKResponse.from_dictionary)
        ).execute()

    def stop_diagnostics_observation(self,
                                     transaction_id,
                                     account_name):
        """Does a DELETE request to /devices/attributes/actions/observe.

        This endpoint allows the user to stop or reset observe diagnostics

        Args:
            transaction_id (string): the ID value associated with the
                transaction
            account_name (string): the numeric account name

        Returns:
            CancelObservationACKResponse: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT4)
            .path('/devices/attributes/actions/observe')
            .http_method(HttpMethodEnum.DELETE)
            .query_param(Parameter()
                         .key('transactionId')
                         .value(transaction_id))
            .query_param(Parameter()
                         .key('accountName')
                         .value(account_name))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CancelObservationACKResponse.from_dictionary)
        ).execute()
