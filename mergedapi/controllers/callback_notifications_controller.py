# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.callback_list_query_response import CallbackListQueryResponse
from mergedapi.models.callback_registration_response_1 import CallbackRegistrationResponse1
from mergedapi.models.success_response import SuccessResponse
from mergedapi.exceptions.error_exception import ErrorException


class CallbackNotificationsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(CallbackNotificationsController, self).__init__(config)

    def get_callbacks_using_get(self,
                                account):
        """Does a GET request to /callbacks/{account}.

        Returns the name and endpoint URL of the callback listening services
        registered for a given account.

        Args:
            account (string): Account identifier in "##########-#####"

        Returns:
            CallbackListQueryResponse: Response from the API. Callback List
                Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackListQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def register_callback_using_post(self,
                                     account,
                                     body):
        """Does a POST request to /callbacks/{account}.

        Registers a URL to receive RESTful messages from a callback service
        when new firmware versions are available and when upgrades start and
        finish.

        Args:
            account (string): Account identifier in "##########-#####"
            body (CallbackRegistrationRequest1): callback details

        Returns:
            CallbackRegistrationResponse1: Response from the API. Callback
                Registration Response

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/callbacks/{account}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CallbackRegistrationResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def deregister_callback_using_delete(self,
                                         account,
                                         service):
        """Does a DELETE request to /callbacks/{account}/name/{service}.

        Deregisters the callback endpoint and stops ThingSpace from sending
        FOTA callback messages for the specified account.

        Args:
            account (string): Account identifier in "##########-#####"
            service (ServiceEnumListEnum): Callback type. Must be 'Fota' for
                Software Management Services API.

        Returns:
            SuccessResponse: Response from the API. Callback successfully
                deregistered

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/callbacks/{account}/name/{service}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('service')
                            .value(service)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
