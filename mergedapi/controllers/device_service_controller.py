# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.request_response_2 import RequestResponse2
from mergedapi.exceptions.rest_error_response_error_2_exception import RestErrorResponseError2Exception


class DeviceServiceController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(DeviceServiceController, self).__init__(config)

    def assign_license_using_post(self,
                                  body,
                                  x_request_id=None):
        """Does a POST request to /v1/devices/license/actions/assign.

        This corresponds to the M2M-MC SOAP interface,
        `ChangeDeviceSkuSubscription`.

        Args:
            body (AssignLicenseRequest): Request
            x_request_id (string, optional): Transaction Id

        Returns:
            RequestResponse2: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT11)
            .path('/v1/devices/license/actions/assign')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('X-Request-ID')
                          .value(x_request_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RequestResponse2.from_dictionary)
            .local_error('400', 'Bad request', RestErrorResponseError2Exception)
            .local_error('401', 'Unauthorized', RestErrorResponseError2Exception)
            .local_error('403', 'Forbidden', RestErrorResponseError2Exception)
            .local_error('404', 'Not Found / Does not exist', RestErrorResponseError2Exception)
            .local_error('406', 'Format / Request Unacceptable', RestErrorResponseError2Exception)
            .local_error('429', 'Too many requests', RestErrorResponseError2Exception)
        ).execute()

    def assign_license_delete_using_delete(self,
                                           x_request_id):
        """Does a DELETE request to /v1/devices/license/actions/assign.

        This corresponds to the M2M-MC SOAP interface,
        `ChangeDeviceSkuSubscription`.

        Args:
            x_request_id (string): Transaction Id

        Returns:
            RequestResponse2: Response from the API. Request ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT11)
            .path('/v1/devices/license/actions/assign')
            .http_method(HttpMethodEnum.DELETE)
            .header_param(Parameter()
                          .key('X-Request-ID')
                          .value(x_request_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(RequestResponse2.from_dictionary)
            .local_error('400', 'Bad request', RestErrorResponseError2Exception)
            .local_error('401', 'Unauthorized', RestErrorResponseError2Exception)
            .local_error('403', 'Forbidden', RestErrorResponseError2Exception)
            .local_error('404', 'Not Found / Does not exist', RestErrorResponseError2Exception)
            .local_error('406', 'Format / Request Unacceptable', RestErrorResponseError2Exception)
            .local_error('429', 'Too many requests', RestErrorResponseError2Exception)
        ).execute()
