# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.campaign_software import CampaignSoftware
from mergedapi.models.add_or_remove_device_resp import AddOrRemoveDeviceResp
from mergedapi.models.success_response_1 import SuccessResponse1
from mergedapi.models.firmware_campaign import FirmwareCampaign
from mergedapi.models.add_or_remove_device_resp_1 import AddOrRemoveDeviceResp1
from mergedapi.models.campaign import Campaign
from mergedapi.exceptions.error_exception import ErrorException


class CampaignsController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(CampaignsController, self).__init__(config)

    def schedule_software_upgrade(self,
                                  account,
                                  body):
        """Does a POST request to /campaigns/{account}.

        This endpoint allows user to schedule a software upgrade.

        Args:
            account (string): Account identifier
            body (CampaignSoftwareUpgrade): Software upgrade information

        Returns:
            CampaignSoftware: Response from the API. Return software upgrade
                information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/campaigns/{account}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignSoftware.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def get_software_upgrade_details(self,
                                     account,
                                     campaign_id):
        """Does a GET request to /campaigns/{account}/{campaignId}.

        This endpoint allows user to get information of a software upgrade.

        Args:
            account (string): Account identifier
            campaign_id (string): Software upgrade identifier

        Returns:
            CampaignSoftware: Response from the API. Return software upgrade
                information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/campaigns/{account}/{campaignId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignSoftware.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def update_software_upgrade(self,
                                account,
                                campaign_id,
                                body):
        """Does a PUT request to /campaigns/{account}/{campaignId}.

        This endpoint allows user to Add or Remove devices to an existing
        software upgrade.

        Args:
            account (string): Account identifier
            campaign_id (string): Software upgrade information
            body (AddOrRemoveDeviceRequest): Add or remove device to existing
                software upgrade information

        Returns:
            AddOrRemoveDeviceResp: Response from the API. Return add or remove
                devices to existing software upgrade information.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/campaigns/{account}/{campaignId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AddOrRemoveDeviceResp.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def cancel_scheduled_software_upgrade(self,
                                          account,
                                          campaign_id):
        """Does a DELETE request to /campaigns/{account}/{campaignId}.

        This endpoint allows user to cancel software upgrade. A software
        upgrade already started can not be cancelled.

        Args:
            account (string): Account identifier
            campaign_id (string): Software upgrade information

        Returns:
            SuccessResponse1: Response from the API. Return cancelation
                status.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/campaigns/{account}/{campaignId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def change_campaign_dates_and_time_windows(self,
                                               account,
                                               campaign_id,
                                               body):
        """Does a PUT request to /campaigns/{account}/{campaignId}/dates.

        This endpoint allows user to change campaign dates and time windows.
        Fields which need to remain unchanged should be also provided

        Args:
            account (string): Account identifier
            campaign_id (string): Software upgrade information
            body (ChangeCampaignDatesRequest): New dates and time windows

        Returns:
            CampaignSoftware: Response from the API. Updated campaign
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT7)
            .path('/campaigns/{account}/{campaignId}/dates')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(CampaignSoftware.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def schedule_a_firmware_upgrade(self,
                                    acc,
                                    body):
        """Does a POST request to /campaigns/firmware/{acc}.

        This endpoint allows a user to schedule a firmware upgrade for a list
        of devices

        Args:
            acc (string): Account identifier
            body (CampaignFirmwareUpgrade): Firmware upgrade information

        Returns:
            FirmwareCampaign: Response from the API. Return upgrade
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/campaigns/firmware/{acc}')
            .http_method(HttpMethodEnum.POST)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FirmwareCampaign.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def add_or_remove_devices(self,
                              acc,
                              campaign_id,
                              body):
        """Does a PUT request to /campaigns/firmware/{acc}/{campaignId}.

        This endpoint allows user to Add or Remove devices to an existing
        campaign

        Args:
            acc (string): Account identifier
            campaign_id (string): firmware upgrade information
            body (AddOrRemoveDeviceRequest): Add or remove device to existing
                upgrade information

        Returns:
            AddOrRemoveDeviceResp1: Response from the API. Returns add or
                remove devices to existing upgrade information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/campaigns/firmware/{acc}/{campaignId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(AddOrRemoveDeviceResp1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def change_campaign_dates_time(self,
                                   acc,
                                   campaign_id,
                                   body):
        """Does a PUT request to /campaigns/firmware/{acc}/{campaignId}/dates.

        This endpoint allows user to change campaign dates and time windows.
        Fields which need to remain unchanged should be also provided

        Args:
            acc (string): Account identifier
            campaign_id (string): Firmware upgrade information
            body (ChangeCampaignDatesRequest1): New dates and time windows

        Returns:
            FirmwareCampaign: Response from the API. Updated campaign
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/campaigns/firmware/{acc}/{campaignId}/dates')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FirmwareCampaign.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def retrieve_campaign_level_information(self,
                                            acc,
                                            campaign_id):
        """Does a GET request to /campaigns/{acc}/{campaignId}.

        This endpoint allows the user to retrieve campaign level information
        for a specified campaign

        Args:
            acc (string): Account identifier
            campaign_id (string): Firmware upgrade identifier

        Returns:
            Campaign: Response from the API. Returns firmware upgrade
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/campaigns/{acc}/{campaignId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Campaign.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def delete_a_campaign(self,
                          acc,
                          campaign_id):
        """Does a DELETE request to /campaigns/{acc}/{campaignId}.

        This endpoint allows user to cancel a firmware campaign. A firmware
        campaign already started can not be cancelled

        Args:
            acc (string): Account identifier
            campaign_id (string): Firmware upgrade information

        Returns:
            SuccessResponse1: Response from the API. Returns cancellation
                status

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT8)
            .path('/campaigns/{acc}/{campaignId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('acc')
                            .value(acc)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('campaignId')
                            .value(campaign_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse1.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
