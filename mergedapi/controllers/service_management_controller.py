# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.service_management_res import ServiceManagementRes
from mergedapi.exceptions.error_response_error_1_exception import ErrorResponseError1Exception


class ServiceManagementController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ServiceManagementController, self).__init__(config)

    def start_service_onboarding(self,
                                 account_name,
                                 service_name,
                                 version,
                                 correlation_id=None):
        """Does a PUT request to /v1/services/{serviceName}/{version}/startOnboarding.

        Start service onboarding process to kick off service artifact
        validation and making the service ready for sandbox testing. On
        successful completion of this process system will generate claims for
        each selected cloud provider using which user can start sandbox
        testing

        Args:
            account_name (string): User account name.
            service_name (string): Name of the service which is to be
                onboarded.
            version (string): Version of service  which is to be onboarded.
            correlation_id (string, optional): TODO: type description here.

        Returns:
            ServiceManagementRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceName}/{version}/startOnboarding')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceName')
                            .value(service_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServiceManagementRes.from_dictionary)
            .local_error('400', 'Bad Request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('403', 'Forbidden', ErrorResponseError1Exception)
            .local_error('404', 'Not found', ErrorResponseError1Exception)
            .local_error('415', 'Unsupported media type', ErrorResponseError1Exception)
            .local_error('429', 'Too many requests', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()

    def sand_box_start_testing(self,
                               account_name,
                               service_id,
                               claim_id,
                               body,
                               correlation_id=None):
        """Does a PUT request to /v1/services/{serviceId}/claims/{claimId}/sandBoxStart.

        Initiate testing of a service in sandbox environment per claim based
        on service's compatibility(s).

        Args:
            account_name (string): User account name.
            service_id (string): serviceId eg:UUID of serviceId Service
                Created
            claim_id (string): claimId eg:UUID of claimId Claim Created
            body (ClusterInfoDetails): body
            correlation_id (string, optional): TODO: type description here.

        Returns:
            ServiceManagementRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceId}/claims/{claimId}/sandBoxStart')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceId')
                            .value(service_id)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('claimId')
                            .value(claim_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServiceManagementRes.from_dictionary)
            .local_error('400', 'Bad Request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()

    def start_publish(self,
                      account_name,
                      service_name,
                      version,
                      correlation_id=None):
        """Does a PUT request to /v1/services/{serviceName}/{version}/publish.

        Use this API to start publishing a service. On successful completion,
        service's status can be marked as Publish.

        Args:
            account_name (string): User account name.
            service_name (string): service Name eg:any sub string of
                serviceName
            version (string): Version of service  which is to be published.
            correlation_id (string, optional): TODO: type description here.

        Returns:
            ServiceManagementRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceName}/{version}/publish')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceName')
                            .value(service_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServiceManagementRes.from_dictionary)
            .local_error('400', 'Bad Request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()

    def stop_service_testing(self,
                             account_name,
                             service_name,
                             version,
                             correlation_id=None):
        """Does a PUT request to /v1/services/{serviceName}/{version}/certify.

        Use this API to start service certification process. On successful
        completion of this process, service's status will  change to
        certified.

        Args:
            account_name (string): User account name.
            service_name (string): service Name eg:any sub string of
                serviceName
            version (string): Version of service  which is to be certified.
            correlation_id (string, optional): TODO: type description here.

        Returns:
            ServiceManagementRes: Response from the API. OK.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceName}/{version}/certify')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceName')
                            .value(service_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServiceManagementRes.from_dictionary)
            .local_error('400', 'Bad Request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()

    def ready_to_public_use(self,
                            account_name,
                            service_name,
                            version,
                            correlation_id=None):
        """Does a PUT request to /v1/services/{serviceName}/{version}/readyToPublicUse.

        Use this API to start the process to change a service's status to
        "Ready to Use". On success, service's status will be changed to "Ready
        to Use". Only a ready to use service can be deployed in production
        environment

        Args:
            account_name (string): User account name.
            service_name (string): service Name eg:any sub string of
                serviceName
            version (string): Version of the service  which is already
                certified and is ready for public use.
            correlation_id (string, optional): TODO: type description here.

        Returns:
            ServiceManagementRes: Response from the API. OK

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT2)
            .path('/v1/services/{serviceName}/{version}/readyToPublicUse')
            .http_method(HttpMethodEnum.PUT)
            .header_param(Parameter()
                          .key('AccountName')
                          .value(account_name))
            .template_param(Parameter()
                            .key('serviceName')
                            .value(service_name)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('version')
                            .value(version)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('correlationId')
                          .value(correlation_id))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ServiceManagementRes.from_dictionary)
            .local_error('400', 'Bad Request', ErrorResponseError1Exception)
            .local_error('401', 'Unauthorized', ErrorResponseError1Exception)
            .local_error('500', 'Internal Server Error', ErrorResponseError1Exception)
        ).execute()
