# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.firmware import Firmware
from mergedapi.models.firmware_upgrade_query_response import FirmwareUpgradeQueryResponse
from mergedapi.models.firmware_upgrade_change_response import FirmwareUpgradeChangeResponse
from mergedapi.models.success_response import SuccessResponse
from mergedapi.exceptions.error_exception import ErrorException


class FirmwareUpgradesController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(FirmwareUpgradesController, self).__init__(config)

    def firmware_query_using_get(self,
                                 account):
        """Does a GET request to /firmware/{account}.

        Lists all device firmware images available for an account, based on
        the devices registered to that account.

        Args:
            account (string): Account identifier in "##########-#####"

        Returns:
            list of Firmware: Response from the API. List of available
                firmware

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/firmware/{account}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(Firmware.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def schedule_firmware_upgrade_using_post(self,
                                             body):
        """Does a POST request to /upgrades.

        Schedules a firmware upgrade for devices.

        Args:
            body (FirmwareUpgradeRequest): Details of the firmware upgrade
                request.

        Returns:
            FirmwareUpgradeQueryResponse: Response from the API. Upgrade
                request confirmation

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/upgrades')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FirmwareUpgradeQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def firmware_upgrade_request_using_get(self,
                                           account,
                                           upgrade_id):
        """Does a GET request to /upgrades/{account}/upgrade/{upgradeId}.

        Returns information about a specified upgrade, include the target date
        of the upgrade, the list of devices in the upgrade, and the status of
        the upgrade for each device.

        Args:
            account (string): Account identifier in "##########-#####"
            upgrade_id (string): The UUID of the upgrade, returned by POST
                /upgrades when the upgrade was scheduled.

        Returns:
            FirmwareUpgradeQueryResponse: Response from the API. Upgrade
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/upgrades/{account}/upgrade/{upgradeId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('upgradeId')
                            .value(upgrade_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FirmwareUpgradeQueryResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def firmware_upgrade_updatet_using_put(self,
                                           account,
                                           upgrade_id,
                                           body):
        """Does a PUT request to /upgrades/{account}/upgrade/{upgradeId}.

        Add or remove devices from a scheduled upgrade.

        Args:
            account (string): Account identifier in "##########-#####"
            upgrade_id (string): The UUID of the upgrade, returned by POST
                /upgrades when the upgrade was scheduled.
            body (FirmwareUpgradeChangeRequest): List of devices to add or
                remove.

        Returns:
            FirmwareUpgradeChangeResponse: Response from the API. Upgrade
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/upgrades/{account}/upgrade/{upgradeId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('upgradeId')
                            .value(upgrade_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('*/*'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(FirmwareUpgradeChangeResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()

    def cancel_firmware_upgrade_using_delete(self,
                                             account,
                                             upgrade_id):
        """Does a DELETE request to /upgrades/{account}/upgrade/{upgradeId}.

        Cancel a scheduled upgrade.

        Args:
            account (string): Account identifier in "##########-#####"
            upgrade_id (string): The UUID of the scheduled upgrade that you
                want to cancel.

        Returns:
            SuccessResponse: Response from the API. Upgrade canceled

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT6)
            .path('/upgrades/{account}/upgrade/{upgradeId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('account')
                            .value(account)
                            .should_encode(True))
            .template_param(Parameter()
                            .key('upgradeId')
                            .value(upgrade_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(SuccessResponse.from_dictionary)
            .local_error('400', 'Unexpected error', ErrorException)
        ).execute()
