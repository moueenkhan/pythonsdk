# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.post_service_profile_response import PostServiceProfileResponse
from mergedapi.models.get_service_profiles_response import GetServiceProfilesResponse
from mergedapi.models.resources_service_profile import ResourcesServiceProfile
from mergedapi.models.update_service_profile import UpdateServiceProfile
from mergedapi.models.delete_service_profile import DeleteServiceProfile
from mergedapi.exceptions.types_error_exception import TypesErrorException


class ServiceProfilesController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ServiceProfilesController, self).__init__(config)

    def create_service_profile(self,
                               body):
        """Does a POST request to /serviceprofiles.

        Creates a service profile that describes the resource requirements of
        a service.

        Args:
            body (ResourcesServiceProfile2): The request body passes all of
                the needed parameters to create a service profile. Parameters
                will be edited here rather than the **Parameters** section
                above. The `maxLatencyMs` and `clientType` parameters are both
                required in the request body. **Note:** The `maxLatencyMs`
                value must be submitted in multiples of 5. Additionally, "GPU"
                is future functionality and the values are not captured.

        Returns:
            PostServiceProfileResponse: Response from the API. service profile
                ID

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceprofiles')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PostServiceProfileResponse.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def get_service_profiles(self):
        """Does a GET request to /serviceprofiles.

        List all service profiles registered under your API key

        Returns:
            GetServiceProfilesResponse: Response from the API. A comma
                delimited list of all the service profiles registered under
                your API key

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceprofiles')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetServiceProfilesResponse.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def get_service_profile_by_profile_id(self,
                                          service_profile_id):
        """Does a GET request to /serviceprofiles/{serviceProfileId}.

        Returns a specified service profile.

        Args:
            service_profile_id (string): TODO: type description here.

        Returns:
            ResourcesServiceProfile: Response from the API. Requested service
                profile

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceprofiles/{serviceProfileId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serviceProfileId')
                            .value(service_profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ResourcesServiceProfile.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def update_service_profile(self,
                               service_profile_id,
                               body):
        """Does a PUT request to /serviceprofiles/{serviceProfileId}.

        Update the definition of a Service Profile.

        Args:
            service_profile_id (string): TODO: type description here.
            body (ResourcesServiceProfile2): The request body passes the rest
                of the needed parameters to create a service profile. The
                `maxLatencyMs` and `clientType` parameters are both required
                in the request body. **Note:** The `maxLatencyMs` value must
                be submitted in multiples of 5. Additionally, "GPU" is future
                functionality and the values are not captured. Default values
                to use are shown.

        Returns:
            UpdateServiceProfile: Response from the API. Update a service
                profile

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceprofiles/{serviceProfileId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('serviceProfileId')
                            .value(service_profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateServiceProfile.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def delete_service_profile(self,
                               service_profile_id):
        """Does a DELETE request to /serviceprofiles/{serviceProfileId}.

        Delete Service Profile based on unique service profile ID

        Args:
            service_profile_id (string): TODO: type description here.

        Returns:
            DeleteServiceProfile: Response from the API. Delete a service
                profile

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceprofiles/{serviceProfileId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('serviceProfileId')
                            .value(service_profile_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeleteServiceProfile.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()
