# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mergedapi.api_helper import APIHelper
from mergedapi.configuration import Server
from mergedapi.controllers.base_controller import BaseController
from apimatic_core.request_builder import RequestBuilder
from apimatic_core.response_handler import ResponseHandler
from apimatic_core.types.parameter import Parameter
from mergedapi.http.http_method_enum import HttpMethodEnum
from apimatic_core.authentication.multiple.single_auth import Single
from apimatic_core.authentication.multiple.and_auth_group import And
from apimatic_core.authentication.multiple.or_auth_group import Or
from mergedapi.models.post_service_endpoint_response import PostServiceEndpointResponse
from mergedapi.models.get_service_endpoints_all_response import GetServiceEndpointsAllResponse
from mergedapi.models.resources_edge_hosted_service_2 import ResourcesEdgeHostedService2
from mergedapi.models.update_service_endpoint import UpdateServiceEndpoint
from mergedapi.models.deregister_service_endpoint import DeregisterServiceEndpoint
from mergedapi.exceptions.types_error_exception import TypesErrorException


class ServiceRegistryController(BaseController):

    """A Controller to access Endpoints in the mergedapi API."""
    def __init__(self, config):
        super(ServiceRegistryController, self).__init__(config)

    def register_service_endpoints(self,
                                   body):
        """Does a POST request to /serviceendpoints.

        Register Service Endpoints of a deployed application to specified MEC
        Platforms.

        Args:
            body (list of ResourcesEdgeHostedService2): An array of Service
                Endpoint data for a deployed application. The request body
                passes all of the needed parameters to create a service
                endpoint. Parameters will be edited here rather than the
                **Parameters** section above. The
                `ern`,`applicationServerProviderId`, `applicationId` and
                `serviceProfileID` parameters are required. **Note:**
                Currently, the only valid value for
                `applicationServerProviderId`is **AWS**. Also, if you do not
                know one of the optional values (i.e. URI), you can erase the
                line from the query by back-spacing over it.

        Returns:
            PostServiceEndpointResponse: Response from the API. Returns a
                serviceEndpointsId

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceendpoints')
            .http_method(HttpMethodEnum.POST)
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(PostServiceEndpointResponse.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def get_service_endpoints_all(self):
        """Does a GET request to /serviceendpointsall.

        Returns a list of all registered service endpoints.

        Returns:
            GetServiceEndpointsAllResponse: Response from the API. Returns a
                comma delimited list of all registered service endpoints.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceendpointsall')
            .http_method(HttpMethodEnum.GET)
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(GetServiceEndpointsAllResponse.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def get_service_endpoints_by_service_endpoints_id(self,
                                                      service_endpoints_id):
        """Does a GET request to /serviceendpoints/{serviceEndpointsId}.

        Returns endpoint information for all Service Endpoints registered to a
        specified serviceEndpointId.

        Args:
            service_endpoints_id (string): A system-defined string identifier
                representing one or more registered Service Endpoints.

        Returns:
            list of ResourcesEdgeHostedService2: Response from the API. An
                array of registered service endpoints

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceendpoints/{serviceEndpointsId}')
            .http_method(HttpMethodEnum.GET)
            .template_param(Parameter()
                            .key('serviceEndpointsId')
                            .value(service_endpoints_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(ResourcesEdgeHostedService2.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def update_service_endpoint(self,
                                service_endpoints_id,
                                body):
        """Does a PUT request to /serviceendpoints/{serviceEndpointsId}.

        Update registered Service Endpoint information.

        Args:
            service_endpoints_id (string): A system-defined string identifier
                representing one or more registered Service Endpoints.
            body (list of ResourcesEdgeHostedService2): Data needed for
                Service Endpoint information. The request body passes the rest
                of the needed parameters to create a service endpoint.
                Parameters other than `serviceEndpointsId` will be edited here
                rather than the **Parameters** section above. The
                `ern`,`applicationServerProviderId` and `applicationId`
                parameters are required. **Note:** Currently, the only valid
                value for `applicationServerProviderId`is **AWS**.

        Returns:
            UpdateServiceEndpoint: Response from the API. Update registered
                Service Endpoint information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceendpoints/{serviceEndpointsId}')
            .http_method(HttpMethodEnum.PUT)
            .template_param(Parameter()
                            .key('serviceEndpointsId')
                            .value(service_endpoints_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('Content-Type')
                          .value('application/json'))
            .body_param(Parameter()
                        .value(body))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .body_serializer(APIHelper.json_serialize)
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(UpdateServiceEndpoint.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()

    def deregister_service_endpoint(self,
                                    service_endpoints_id):
        """Does a DELETE request to /serviceendpoints/{serviceEndpointsId}.

        Deregister an application's Service Endpoint from the MEC
        Platform(s).

        Args:
            service_endpoints_id (string): A system-defined string identifier
                representing one or more registered Service Endpoints.

        Returns:
            DeregisterServiceEndpoint: Response from the API. Service endpoint
                deleted

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        return super().new_api_call_builder.request(
            RequestBuilder().server(Server.DEFAULT)
            .path('/serviceendpoints/{serviceEndpointsId}')
            .http_method(HttpMethodEnum.DELETE)
            .template_param(Parameter()
                            .key('serviceEndpointsId')
                            .value(service_endpoints_id)
                            .should_encode(True))
            .header_param(Parameter()
                          .key('accept')
                          .value('application/json'))
            .auth(Single('global'))
        ).response(
            ResponseHandler()
            .deserializer(APIHelper.json_deserialize)
            .deserialize_into(DeregisterServiceEndpoint.from_dictionary)
            .local_error('400', 'HTTP 400 Bad Request', TypesErrorException)
            .local_error('401', 'HTTP 401 Unauthorized', TypesErrorException)
        ).execute()
