# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from apimatic_core.configurations.global_configuration import GlobalConfiguration
from apimatic_core.decorators.lazy_property import LazyProperty
from mergedapi.configuration import Configuration
from mergedapi.controllers.base_controller import BaseController
from mergedapi.configuration import Environment
from mergedapi.http.auth.oauth_2 import Oauth2
from mergedapi.controllers.m_5g_edge_platform_discovery_controller\
    import M5gEdgePlatformDiscoveryController
from mergedapi.controllers.service_endpoint_discovery_controller\
    import ServiceEndpointDiscoveryController
from mergedapi.controllers.service_profiles_controller\
    import ServiceProfilesController
from mergedapi.controllers.service_registry_controller\
    import ServiceRegistryController
from mergedapi.controllers.m_5g_mec_performance_api_controller\
    import M5gMECPerformanceAPIController
from mergedapi.controllers.mec_sites_controller import MECSitesController
from mergedapi.controllers.service_profile_controller\
    import ServiceProfileController
from mergedapi.controllers.service_request_controller\
    import ServiceRequestController
from mergedapi.controllers.service_instance_operations_controller\
    import ServiceInstanceOperationsController
from mergedapi.controllers.files_controller import FilesController
from mergedapi.controllers.category_controller import CategoryController
from mergedapi.controllers.tags_controller import TagsController
from mergedapi.controllers.repository_controller import RepositoryController
from mergedapi.controllers.service_onboarding_controller\
    import ServiceOnboardingController
from mergedapi.controllers.csp_profile_controller import CSPProfileController
from mergedapi.controllers.service_management_controller\
    import ServiceManagementController
from mergedapi.controllers.claims_controller import ClaimsController
from mergedapi.controllers.targets_controller import TargetsController
from mergedapi.controllers.subscriptions_controller\
    import SubscriptionsController
from mergedapi.controllers.observations_controller\
    import ObservationsController
from mergedapi.controllers.history_controller import HistoryController
from mergedapi.controllers.settings_controller import SettingsController
from mergedapi.controllers.callbacks_controller import CallbacksController
from mergedapi.controllers.locations_controller import LocationsController
from mergedapi.controllers.exclusions_controller import ExclusionsController
from mergedapi.controllers.license_management_controller\
    import LicenseManagementController
from mergedapi.controllers.firmware_upgrades_controller\
    import FirmwareUpgradesController
from mergedapi.controllers.callback_notifications_controller\
    import CallbackNotificationsController
from mergedapi.controllers.reports_controller import ReportsController
from mergedapi.controllers.licenses_controller import LicensesController
from mergedapi.controllers.license_cancellation_candidate_devices_list_controller\
    import LicenseCancellationCandidateDevicesListController
from mergedapi.controllers.campaigns_controller import CampaignsController
from mergedapi.controllers.software_controller import SoftwareController
from mergedapi.controllers.devices_controller import DevicesController
from mergedapi.controllers.client_logging_controller\
    import ClientLoggingController
from mergedapi.controllers.server_logging_controller\
    import ServerLoggingController
from mergedapi.controllers.firmware_controller import FirmwareController
from mergedapi.controllers.accounts_controller import AccountsController
from mergedapi.controllers.groups_controller import GroupsController
from mergedapi.controllers.sms_controller import SmsController
from mergedapi.controllers.session_controller import SessionController
from mergedapi.controllers.requests_controller import RequestsController
from mergedapi.controllers.plans_controller import PlansController
from mergedapi.controllers.device_management_controller\
    import DeviceManagementController
from mergedapi.controllers.triggers_controller import TriggersController
from mergedapi.controllers.device_service_controller\
    import DeviceServiceController
from mergedapi.controllers.account_service_controller\
    import AccountServiceController
from mergedapi.controllers.oauth_authorization_controller\
    import OauthAuthorizationController


class MergedapiClient(object):

    @LazyProperty
    def m_5g_edge_platform_discovery(self):
        return M5gEdgePlatformDiscoveryController(self.global_configuration)

    @LazyProperty
    def service_endpoint_discovery(self):
        return ServiceEndpointDiscoveryController(self.global_configuration)

    @LazyProperty
    def service_profiles(self):
        return ServiceProfilesController(self.global_configuration)

    @LazyProperty
    def service_registry(self):
        return ServiceRegistryController(self.global_configuration)

    @LazyProperty
    def m_5g_mec_performance_api(self):
        return M5gMECPerformanceAPIController(self.global_configuration)

    @LazyProperty
    def mec_sites(self):
        return MECSitesController(self.global_configuration)

    @LazyProperty
    def service_profile(self):
        return ServiceProfileController(self.global_configuration)

    @LazyProperty
    def service_request(self):
        return ServiceRequestController(self.global_configuration)

    @LazyProperty
    def service_instance_operations(self):
        return ServiceInstanceOperationsController(self.global_configuration)

    @LazyProperty
    def files(self):
        return FilesController(self.global_configuration)

    @LazyProperty
    def category(self):
        return CategoryController(self.global_configuration)

    @LazyProperty
    def tags(self):
        return TagsController(self.global_configuration)

    @LazyProperty
    def repository(self):
        return RepositoryController(self.global_configuration)

    @LazyProperty
    def service_onboarding(self):
        return ServiceOnboardingController(self.global_configuration)

    @LazyProperty
    def csp_profile(self):
        return CSPProfileController(self.global_configuration)

    @LazyProperty
    def service_management(self):
        return ServiceManagementController(self.global_configuration)

    @LazyProperty
    def claims(self):
        return ClaimsController(self.global_configuration)

    @LazyProperty
    def targets(self):
        return TargetsController(self.global_configuration)

    @LazyProperty
    def subscriptions(self):
        return SubscriptionsController(self.global_configuration)

    @LazyProperty
    def observations(self):
        return ObservationsController(self.global_configuration)

    @LazyProperty
    def history(self):
        return HistoryController(self.global_configuration)

    @LazyProperty
    def settings(self):
        return SettingsController(self.global_configuration)

    @LazyProperty
    def callbacks(self):
        return CallbacksController(self.global_configuration)

    @LazyProperty
    def locations(self):
        return LocationsController(self.global_configuration)

    @LazyProperty
    def exclusions(self):
        return ExclusionsController(self.global_configuration)

    @LazyProperty
    def license_management(self):
        return LicenseManagementController(self.global_configuration)

    @LazyProperty
    def firmware_upgrades(self):
        return FirmwareUpgradesController(self.global_configuration)

    @LazyProperty
    def callback_notifications(self):
        return CallbackNotificationsController(self.global_configuration)

    @LazyProperty
    def reports(self):
        return ReportsController(self.global_configuration)

    @LazyProperty
    def licenses(self):
        return LicensesController(self.global_configuration)

    @LazyProperty
    def license_cancellation_candidate_devices_list(self):
        return LicenseCancellationCandidateDevicesListController(self.global_configuration)

    @LazyProperty
    def campaigns(self):
        return CampaignsController(self.global_configuration)

    @LazyProperty
    def software(self):
        return SoftwareController(self.global_configuration)

    @LazyProperty
    def devices(self):
        return DevicesController(self.global_configuration)

    @LazyProperty
    def client_logging(self):
        return ClientLoggingController(self.global_configuration)

    @LazyProperty
    def server_logging(self):
        return ServerLoggingController(self.global_configuration)

    @LazyProperty
    def firmware(self):
        return FirmwareController(self.global_configuration)

    @LazyProperty
    def accounts(self):
        return AccountsController(self.global_configuration)

    @LazyProperty
    def groups(self):
        return GroupsController(self.global_configuration)

    @LazyProperty
    def sms(self):
        return SmsController(self.global_configuration)

    @LazyProperty
    def session(self):
        return SessionController(self.global_configuration)

    @LazyProperty
    def requests(self):
        return RequestsController(self.global_configuration)

    @LazyProperty
    def plans(self):
        return PlansController(self.global_configuration)

    @LazyProperty
    def device_management(self):
        return DeviceManagementController(self.global_configuration)

    @LazyProperty
    def triggers(self):
        return TriggersController(self.global_configuration)

    @LazyProperty
    def device_service_controller(self):
        return DeviceServiceController(self.global_configuration)

    @LazyProperty
    def account_service_controller(self):
        return AccountServiceController(self.global_configuration)

    @LazyProperty
    def oauth_authorization(self):
        return OauthAuthorizationController(self.global_configuration)

    def __init__(self, http_client_instance=None,
                 override_http_client_configuration=False, http_call_back=None,
                 timeout=60, max_retries=0, backoff_factor=2,
                 retry_statuses=[408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                 retry_methods=['GET', 'PUT'],
                 environment=Environment.PRODUCTION,
                 oauth_client_id='TODO: Replace',
                 oauth_client_secret='TODO: Replace', oauth_token=None,
                 oauth_scopes=None, vz_m2m_token='TODO: Replace', config=None):
        if config is None:
            self.config = Configuration(
                                         http_client_instance=http_client_instance,
                                         override_http_client_configuration=override_http_client_configuration,
                                         http_call_back=http_call_back,
                                         timeout=timeout,
                                         max_retries=max_retries,
                                         backoff_factor=backoff_factor,
                                         retry_statuses=retry_statuses,
                                         retry_methods=retry_methods,
                                         environment=environment,
                                         oauth_client_id=oauth_client_id,
                                         oauth_client_secret=oauth_client_secret,
                                         oauth_token=oauth_token,
                                         oauth_scopes=oauth_scopes,
                                         vz_m2m_token=vz_m2m_token)
        else:
            self.config = config

        self.global_configuration = GlobalConfiguration(self.config)\
            .global_errors(BaseController.global_errors())\
            .base_uri_executor(self.config.get_base_uri)\
            .user_agent(BaseController.user_agent(), BaseController.user_agent_parameters())\
            .global_header('VZ-M2M-Token', self.config.vz_m2m_token)

        self.initialize_auth_managers(self.global_configuration)

        self.global_configuration = self.global_configuration.auth_managers(self.auth_managers)

    def initialize_auth_managers(self, global_config):
        http_client_config = global_config.get_http_client_configuration()
        self.auth_managers = { key: None for key in ['global']}
        self.auth_managers['global'] = Oauth2(http_client_config.oauth_client_id, http_client_config.oauth_client_secret, http_client_config.oauth_token, global_config, http_client_config.oauth_scopes)
        return self.auth_managers
