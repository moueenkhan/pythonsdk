# -*- coding: utf-8 -*-

"""
mergedapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from mergedapi.api_helper import APIHelper
from mergedapi.models.create_a_subscription_request import CreateASubscriptionRequest
from mergedapi.models.query_a_subscription_request import QueryASubscriptionRequest
from mergedapi.models.deletea_subscription_request import DeleteaSubscriptionRequest


class SubscriptionsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SubscriptionsControllerTests, cls).setUpClass()
        cls.controller = cls.client.subscriptions
        cls.response_catcher = cls.controller.http_call_back

    # Create a subscription to define a streaming channel that sends data from devices in the account to an endpoint defined in a target resource.
    def test_create_a_subscription(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"accountidentifier":{"billingaccountid":"1223334444-00001"},"bill'
            'ingaccountid":"1223334444-00001","allowaggregation":false,"name":"'
            'Account subscription 1","targetid":"{target ID}","streamkind":"ts.'
            'event","email":"me@mycompany.com"}', CreateASubscriptionRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_a_subscription(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"configurationfailures":0,"createdon":"2018-12-21T05:05:02.134Z",'
            '"delegateid":"00000000-0000-0000-0000-000000000000","id":"d8c145dd'
            '-6948-67ec-ed9b-6a298806bb4a","kind":"ts.subscription","laststream'
            'ingstatus":"","laststreamingtime":"0001-01-01T00:00:00Z","lastupda'
            'ted":"2018-12-21T05:22:12.178Z","networkfailures":0,"streamfailure'
            's":0,"streamkind":"ts.event","targetid":"4e211a0e-e39d-6c32-e15b-d'
            '6f07f9e2ec8","version":"1.0","versionid":"5ed6063f-04e0-11e9-8279-'
            '02420a5e1b0b"}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Search for subscriptions by property values. Returns an array of all matching subscription resources.
    def test_query_a_subscription(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"accountidentifier":{"billingaccountid":"1223334444-00001"},"reso'
            'urceidentifier":{"id":"dd1682d3-2d80-cefc-f3ee-25154800beff"}}', QueryASubscriptionRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.query_a_subscription(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"configurationfailures":0,"createdon":"2019-02-13T23:13:24.689Z"'
            ',"delegateid":"00000000-0000-0000-0000-000000000000","disabled":fa'
            'lse,"email":"me@mycompany.com","id":"98015aed-e984-62be-f049-1d895'
            'd2d1812","kind":"ts.subscription","laststreamingstatus":"success",'
            '"laststreamingtime":"2019-02-20T18:20:45.865Z","lastupdated":"2019'
            '-02-13T23:13:24.689Z","networkfailures":0,"streamfailures":0,"stre'
            'amkind":"ts.event","targetid":"4e112cb3-da1d-6ece-f2c6-bb8700b20b0'
            '9","targettype":"Amazon Web Services","version":"1.0","versionid":'
            '"f68b8862-2fe4-11e9-85fd-02420a4c170d"}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Remove a subscription from a ThingSpace account.
    def test_delete_a_subscription(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"accountidentifier":{"billingaccountid":"1223334444-00001"},"reso'
            'urceidentifier":{"id":"f8b112df-739c-6236-f059-106c67bafd99"}}', DeleteaSubscriptionRequest.from_dictionary)

        # Perform the API call through the SDK function
        self.controller.delete_a_subscription(body)

        # Test response code
        assert self.response_catcher.response.status_code == 204

